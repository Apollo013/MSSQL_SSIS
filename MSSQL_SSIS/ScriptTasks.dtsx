<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="2/14/2017 2:13:11 AM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="APOLLO-HP"
  DTS:CreatorName="Apollo-HP\Apollo"
  DTS:DTSID="{B3B34A5B-92EF-482F-B8A0-CA281C00EF0E}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="13.0.2165.0"
  DTS:LocaleID="6153"
  DTS:ObjectName="ScriptTasks"
  DTS:PackageType="5"
  DTS:VersionBuild="19"
  DTS:VersionGUID="{1C10E588-89DB-4311-8623-6BB760CECD1D}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[Excel Connection Manager]"
      DTS:CreationName="EXCEL"
      DTS:DTSID="{19180BA9-997E-4392-8426-D58B2AC1A476}"
      DTS:ObjectName="Excel Connection Manager">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Provider=Microsoft.Jet.OLEDB.4.0;Data Source=C:\Apps\Published\MSSQL_SSIS\Exports\Customers.xls;Extended Properties=&quot;Excel 8.0;HDR=YES&quot;;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{E4590673-8B3A-46A0-909C-131ABB0BD626}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="BerlinTotal">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{794C5B59-22F5-482A-807C-B61A7BA0909E}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="LondonTotal">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Choose Source"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{6490EDC0-F2FE-40E8-81D5-8670266100FB}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Choose Source"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_dd96e4dd343f4abeb7fe4cca029eb778"
          VSTAMajorVersion="14"
          VSTAMinorVersion="0"
          Language="CSharp"
          EntryPoint="MakeChoice">
          <ProjectItem
            Name="ST_dd96e4dd343f4abeb7fe4cca029eb778.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{4dfaf8eb-1212-4d50-81ec-44e3ada069a5}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_dd96e4dd343f4abeb7fe4cca029eb778</RootNamespace>
    <AssemblyName>ST_dd96e4dd343f4abeb7fe4cca029eb778</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>

  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>

  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
         <Generator>ResXFileCodeGenerator</Generator>
         <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
             <AutoGen>True</AutoGen>
         <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
         <Generator>SettingsSingleFileGenerator</Generator>
         <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
         <AutoGen>True</AutoGen>
         <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
         <SubType>Code</SubType>
    </Compile>
  </ItemGroup>

  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />

  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="ScriptTask"
                           HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}"
                           ApplicationType="usd"
                           Language="cs"
                           TemplatesPath=""
                           DebugInfoCommandLine=""
                           DebugInfoWorkingDir=""
                           IconImageList=""/>
        <Host Name="ScriptTask" GeneratedNamespace="$safeprojectname" IconIndex="">
        </Host>
        <ProjectClient>
            <HostIdentifier>SSIS_ST130</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_dd96e4dd343f4abeb7fe4cca029eb778.Properties.Settings.get_Default():ST_dd96e4dd343f4abeb7fe4cca029eb778.Properties.Sett" +
    "ings")]

namespace ST_dd96e4dd343f4abeb7fe4cca029eb778.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System.Windows.Forms;
#endregion

namespace ST_dd96e4dd343f4abeb7fe4cca029eb778
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void MakeChoice()
        {
            DialogResult result = MessageBox.Show("Choose Excel", "Choose", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1);

            switch (result)
            {
                case DialogResult.Yes:
                    Dts.TaskResult = (int)ScriptResults.Success;
                    break;
                case DialogResult.No:
                    Dts.TaskResult = (int)ScriptResults.Failure;
                    break;
            }

        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

    }
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>ST_dd96e4dd343f4abeb7fe4cca029eb778</msb:CodeName>
		<msb:DisplayName>ST_dd96e4dd343f4abeb7fe4cca029eb778</msb:DisplayName>
		<msb:ProjectId>{E62B136C-D953-47CE-8A2E-A9D6B15BEEB5}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_dd96e4dd343f4abeb7fe4cca029eb778.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_dd96e4dd343f4abeb7fe4cca029eb778")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Hewlett-Packard Company")]
[assembly: AssemblyProduct("ST_dd96e4dd343f4abeb7fe4cca029eb778")]
[assembly: AssemblyCopyright("Copyright @ Hewlett-Packard Company 2017")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_dd96e4dd343f4abeb7fe4cca029eb778.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_dd96e4dd343f4abeb7fe4cca029eb778.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_dd96e4dd343f4abeb7fe4cca029eb778.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_dd96e4dd343f4abeb7fe4cca029eb778.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_dd96e4dd343f4abeb7fe4cca029eb778.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_dd96e4dd343f4abeb7fe4cca029eb778.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDACxpolgAAAAAAAAAAOAAIiALATAAAA4AAAAIAAAAAAAAzi0A
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAHwtAABPAAAAAEAAAMgEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAA1A0AAAAgAAAADgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAMgEAAAAQAAAAAYAAAAQAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAFgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAACw
LQAAAAAAAEgAAAACAAUA/CAAAMgLAAABAAAAAAAAAMQsAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABMwBQA3AAAAAQAAEXIBAABwchsAAHAaHyAWKBAAAAoKBhwu
BQYdLg4qAigRAAAKFm8SAAAKKgIoEQAAChdvEgAACioeAigTAAAKKh4CKBQAAAoqrn4BAAAELR5y
KQAAcNADAAACKBUAAApvFgAACnMXAAAKgAEAAAR+AQAABCoafgIAAAQqHgKAAgAABCoafgMAAAQq
HgIoGAAACioucwgAAAaAAwAABCoAAABCU0pCAQABAAAAAAAMAAAAdjQuMC4zMDMxOQAAAAAFAGwA
AAC8AwAAI34AACgEAABgBQAAI1N0cmluZ3MAAAAAiAkAAJwAAAAjVVMAJAoAABAAAAAjR1VJRAAA
ADQKAACUAQAAI0Jsb2IAAAAAAAAAAgAAAVcdogEJAwAAAPoBMwAWAAABAAAAIAAAAAUAAAAGAAAA
CQAAAAEAAAAYAAAAAgAAABAAAAABAAAAAgAAAAMAAAAEAAAAAQAAAAQAAAABAAAAAQAAAAAAJQMB
AAAAAAAGAOgBEwQGAHcCEwQGADQBAAQPAIcEAAAGAGEBqQMGAMsBqQMGAKwBqQMGAF4CqQMGAAgC
qQMGACECqQMGAHgBqQMGAJMBmwIKADwC1AIKALMA1AIOACYFzgQGAFQDTQMGABcBAAQGABMFTQMG
AOMDMwQGANMDlAMSAOcADwMSAEgBDwMSAM8AfwMGAPwAEwQOAEcFzgQOAOMEzgQOAHADzgQOALsD
zgQKAP0C1AIGAH4ATQMGAFoATQMGAFYFqQMAAAAAJQAAAAAAAQABAAEAEABlAwEAOQABAAEAAAAQ
ADoElgRJAAEAAwAAARAAxQSWBF0AAwAHAAMBAAAFBQAAQQAEAAoAEQBZA2MAEQCjAGcAEQBKAGsA
BgYuAG8AVoD1BHIAVoCDAHIAUCAAAAAAhgA/AAYAAQCTIAAAAACGGPMDBgABAJsgAAAAAIMY8wMG
AAEAoyAAAAAAkwjfA3YAAQDPIAAAAACTCIsAewABANYgAAAAAJMIlwCAAAEA3iAAAAAAlggaBYYA
AgDlIAAAAACGGPMDBgACAO0gAAAAAJEY+QOLAAIAAAABAJUCCQDzAwEAEQDzAwYAGQDzAwoAKQDz
AxAAMQDzAxAAOQDzAxAAQQDzAxAASQDzAxAAUQDzAxAAWQDzAxAAYQDzAxAAaQDzAwYAiQDzAwYA
sQDzAxUAwQDzAwYAyQBCBSAAcQD9BC0A6QAzBQEAcQDzAwYAkQDzAwYA8QBsADIA8QBSBTkAmQDz
Az8AuQDzAwYACAAUAFkACAAYAF4AKQBzAMYALgALAJ4ALgATAKcALgAbAMYALgAjAM8ALgArAPgA
LgAzAPgALgA7AP4ALgBDAM8ALgBLABsBLgBTAPgALgBbAEkBQwBjAF4ASQBzAMYAYQB7AF4AYwBr
AF4AGwADAAEABAADAAAA4wOPAAAAqwCUAAAAHgWZAAIABAADAAIABQAFAAEABgAFAAIABwAHAASA
AAABAAAAbhhWEAAAAAAAAAEAAAAEAAAAAAAAAAAAAABHADYAAAAAAA0AAAAAAAAAAAAAAFAAtQIA
AAAABAAAAAAAAAAAAAAARwDOBAAAAAAEAAAAAAAAAAAAAABHAE0DAAAAAAAAAAABAAAARAQAAAUA
AgAAAABTVF9kZDk2ZTRkZDM0M2Y0YWJlYjdmZTRjY2EwMjllYjc3OAA8TW9kdWxlPgB2YWx1ZV9f
AG1zY29ybGliAE1ha2VDaG9pY2UAZGVmYXVsdEluc3RhbmNlAFJ1bnRpbWVUeXBlSGFuZGxlAEdl
dFR5cGVGcm9tSGFuZGxlAFR5cGUARmFpbHVyZQBnZXRfQ3VsdHVyZQBzZXRfQ3VsdHVyZQByZXNv
dXJjZUN1bHR1cmUAVlNUQVJUU2NyaXB0T2JqZWN0TW9kZWxCYXNlAEFwcGxpY2F0aW9uU2V0dGlu
Z3NCYXNlAEVkaXRvckJyb3dzYWJsZVN0YXRlAENvbXBpbGVyR2VuZXJhdGVkQXR0cmlidXRlAERl
YnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1dGUARGVidWdnYWJsZUF0dHJpYnV0ZQBFZGl0b3JCcm93
c2FibGVBdHRyaWJ1dGUAQXNzZW1ibHlUaXRsZUF0dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0
dHJpYnV0ZQBUYXJnZXRGcmFtZXdvcmtBdHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0
cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRpb25BdHRyaWJ1dGUAQ29tcGlsYXRpb25SZWxheGF0aW9u
c0F0dHJpYnV0ZQBBc3NlbWJseVByb2R1Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRy
aWJ1dGUAU1NJU1NjcmlwdFRhc2tFbnRyeVBvaW50QXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0
dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQB2YWx1ZQBTeXN0ZW0uUnVudGlt
ZS5WZXJzaW9uaW5nAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuU2NyaXB0VGFzawBNaWNyb3NvZnQuU3Fs
U2VydmVyLkR0cy5UYXNrcy5TY3JpcHRUYXNrAFNjcmlwdE9iamVjdE1vZGVsAFN5c3RlbS5Db21w
b25lbnRNb2RlbABTVF9kZDk2ZTRkZDM0M2Y0YWJlYjdmZTRjY2EwMjllYjc3OC5kbGwAU3lzdGVt
AEVudW0AcmVzb3VyY2VNYW4AU2NyaXB0TWFpbgBNZXNzYWdlQm94SWNvbgBTeXN0ZW0uQ29uZmln
dXJhdGlvbgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBTeXN0ZW0uUmVmbGVjdGlvbgBNZXNzYWdlQm94
RGVmYXVsdEJ1dHRvbgBDdWx0dXJlSW5mbwBnZXRfUmVzb3VyY2VNYW5hZ2VyAC5jdG9yAC5jY3Rv
cgBTeXN0ZW0uRGlhZ25vc3RpY3MAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBTeXN0
ZW0uUmVzb3VyY2VzAFNUX2RkOTZlNGRkMzQzZjRhYmViN2ZlNGNjYTAyOWViNzc4LlByb3BlcnRp
ZXMuUmVzb3VyY2VzLnJlc291cmNlcwBEZWJ1Z2dpbmdNb2RlcwBTVF9kZDk2ZTRkZDM0M2Y0YWJl
YjdmZTRjY2EwMjllYjc3OC5Qcm9wZXJ0aWVzAFNldHRpbmdzAFN5c3RlbS5XaW5kb3dzLkZvcm1z
AE1lc3NhZ2VCb3hCdXR0b25zAFN1Y2Nlc3MAZ2V0X0R0cwBTY3JpcHRSZXN1bHRzAE9iamVjdABn
ZXRfRGVmYXVsdABEaWFsb2dSZXN1bHQAc2V0X1Rhc2tSZXN1bHQAU2hvdwBNZXNzYWdlQm94AGdl
dF9Bc3NlbWJseQAAABlDAGgAbwBvAHMAZQAgAEUAeABjAGUAbAAADUMAaABvAG8AcwBlAABxUwBU
AF8AZABkADkANgBlADQAZABkADMANAAzAGYANABhAGIAZQBiADcAZgBlADQAYwBjAGEAMAAyADkA
ZQBiADcANwA4AC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQByAGMAZQBzAAAAq084
w5xb+Ei4PKUQWTbpcAAEIAEBCAMgAAEFIAEBEREEIAEBDgUgAQERVQQHARE9DAAFET0ODhFpEW0R
cQQgABJ1BgABEnkRfQUgABKAgQcgAgEOEoCBCLd6XFYZNOCJCImEXc2AgMyRBAAAAAAEAQAAAAMG
Ek0DBhJRAwYSEAIGCAMGERQEAAASTQQAABJRBQABARJRBAAAEhADAAABBAgAEk0ECAASUQQIABIQ
CAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhyb3dzAQgBAAIAAAAAACgBACNTVF9k
ZDk2ZTRkZDM0M2Y0YWJlYjdmZTRjY2EwMjllYjc3OAAABQEAAAAAHAEAF0hld2xldHQtUGFja2Fy
ZCBDb21wYW55AAAtAQAoQ29weXJpZ2h0IEAgSGV3bGV0dC1QYWNrYXJkIENvbXBhbnkgMjAxNwAA
SQEAGi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC41AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRIu
TkVUIEZyYW1ld29yayA0LjUAtAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291
cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1
YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVz
b3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAAKQtAAAAAAAAAAAAAL4tAAAAIAAAAAAAAAAA
AAAAAAAAAAAAAAAAAACwLQAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/
JQAgABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAQAQAAAAGAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAA
AAAASAAAAFhAAABsBAAAAAAAAAAAAABsBDQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYA
TwAAAAAAvQTv/gAAAQAAAAEAVhBuGAAAAQBWEG4YPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAA
AEQAAAABAFYAYQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkA
bwBuAAAAAAAAALAEzAMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAqAMAAAEAMAAw
ADAAMAAwADQAYgAwAAAAGgABAAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAAFAAGAABAEMAbwBtAHAA
YQBuAHkATgBhAG0AZQAAAAAASABlAHcAbABlAHQAdAAtAFAAYQBjAGsAYQByAGQAIABDAG8AbQBw
AGEAbgB5AAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAVABfAGQA
ZAA5ADYAZQA0AGQAZAAzADQAMwBmADQAYQBiAGUAYgA3AGYAZQA0AGMAYwBhADAAMgA5AGUAYgA3
ADcAOAAAADwADgABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgA2ADIANQA0AC4A
NAAxADgAMgAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBUAF8AZABkADkANgBl
ADQAZABkADMANAAzAGYANABhAGIAZQBiADcAZgBlADQAYwBjAGEAMAAyADkAZQBiADcANwA4AC4A
ZABsAGwAAAB2ACkAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBn
AGgAdAAgAEAAIABIAGUAdwBsAGUAdAB0AC0AUABhAGMAawBhAHIAZAAgAEMAbwBtAHAAYQBuAHkA
IAAyADAAMQA3AAAAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABlAG0AYQByAGsAcwAAAAAAAAAA
AHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABTAFQAXwBkAGQAOQA2AGUA
NABkAGQAMwA0ADMAZgA0AGEAYgBlAGIANwBmAGUANABjAGMAYQAwADIAOQBlAGIANwA3ADgALgBk
AGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBUAF8AZABkADkANgBlADQA
ZABkADMANAAzAGYANABhAGIAZQBiADcAZgBlADQAYwBjAGEAMAAyADkAZQBiADcANwA4AAAAQAAO
AAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA2ADIANQA0AC4ANAAxADgA
MgAAAEQADgABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADYAMgA1
ADQALgA0ADEAOAAyAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAMAAAA0D0A
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Display Count"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{6FB26B4F-237C-44E6-9452-5801BFC8A07D}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Display Count"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_841d32b3719b41a39c52097840492007"
          VSTAMajorVersion="14"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::BerlinTotal,User::LondonTotal">
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_841d32b3719b41a39c52097840492007.Properties.Settings.get_Default():ST_841d32b3719b41a39c52097840492007.Properties.Sett" +
    "ings")]

namespace ST_841d32b3719b41a39c52097840492007.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System.Windows.Forms;
#endregion

namespace ST_841d32b3719b41a39c52097840492007
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
            // TODO: Add your code here
            int londonCustomers = (int)Dts.Variables["User::LondonTotal"].Value;
            int berlinCustomers = (int)Dts.Variables["User::BerlinTotal"].Value;

            MessageBox.Show($"London: {londonCustomers} - Berlin: {berlinCustomers}");

            Dts.TaskResult = (int)ScriptResults.Success;
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

    }
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_841d32b3719b41a39c52097840492007</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>ST_841d32b3719b41a39c52097840492007</msb:DisplayName>
		<msb:ProjectId>{C48BEB84-F1D1-4CCE-8F17-F3A6290A9179}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_841d32b3719b41a39c52097840492007.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_841d32b3719b41a39c52097840492007")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Hewlett-Packard Company")]
[assembly: AssemblyProduct("ST_841d32b3719b41a39c52097840492007")]
[assembly: AssemblyCopyright("Copyright @ Hewlett-Packard Company 2017")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="ST_841d32b3719b41a39c52097840492007.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{2458ea94-e08c-4523-a157-78aa4878d76f}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_841d32b3719b41a39c52097840492007</RootNamespace>
    <AssemblyName>ST_841d32b3719b41a39c52097840492007</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>

  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>

  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
         <Generator>ResXFileCodeGenerator</Generator>
         <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
             <AutoGen>True</AutoGen>
         <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
         <Generator>SettingsSingleFileGenerator</Generator>
         <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
         <AutoGen>True</AutoGen>
         <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
         <SubType>Code</SubType>
    </Compile>
  </ItemGroup>

  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />

  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="ScriptTask"
                           HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}"
                           ApplicationType="usd"
                           Language="cs"
                           TemplatesPath=""
                           DebugInfoCommandLine=""
                           DebugInfoWorkingDir=""
                           IconImageList=""/>
        <Host Name="ScriptTask" GeneratedNamespace="$safeprojectname" IconIndex="">
        </Host>
        <ProjectClient>
            <HostIdentifier>SSIS_ST130</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_841d32b3719b41a39c52097840492007.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_841d32b3719b41a39c52097840492007.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_841d32b3719b41a39c52097840492007.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_841d32b3719b41a39c52097840492007.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_841d32b3719b41a39c52097840492007.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_841d32b3719b41a39c52097840492007.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAAxuolgAAAAAAAAAAOAAIiALATAAABAAAAAIAAAAAAAAzi4A
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAHwuAABPAAAAAEAAAMgEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAA1A4AAAAgAAAAEAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAMgEAAAAQAAAAAYAAAASAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAGAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAACw
LgAAAAAAAEgAAAACAAUALCEAAJgMAAABAAAAAAAAAMQtAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABMwAwBpAAAAAQAAEQIoEAAACm8RAAAKcgEAAHBvEgAACm8T
AAAKpRsAAAEKAigQAAAKbxEAAApyJQAAcG8SAAAKbxMAAAqlGwAAAQtySQAAcAaMGwAAAQeMGwAA
ASgUAAAKKBUAAAomAigQAAAKFm8WAAAKKh4CKBcAAAoqHgIoGAAACiqufgEAAAQtHnJ9AABw0AMA
AAIoGQAACm8aAAAKcxsAAAqAAQAABH4BAAAEKhp+AgAABCoeAoACAAAEKhp+AwAABCoeAigcAAAK
Ki5zCAAABoADAAAEKgBCU0pCAQABAAAAAAAMAAAAdjQuMC4zMDMxOQAAAAAFAGwAAADwAwAAI34A
AFwEAACYBQAAI1N0cmluZ3MAAAAA9AkAAPAAAAAjVVMA5AoAABAAAAAjR1VJRAAAAPQKAACkAQAA
I0Jsb2IAAAAAAAAAAgAAAVcdogEJAwAAAPoBMwAWAAABAAAAIQAAAAUAAAAGAAAACQAAAAEAAAAc
AAAAAgAAABAAAAABAAAAAgAAAAMAAAAEAAAAAQAAAAUAAAABAAAAAQAAAAAAeQMBAAAAAAAGACsC
SQQGALoCSQQGAHcBNgQPAL0EAAAGAKQB9wMGAA4C9wMGAO8B9wMGAKEC9wMGAEsC9wMGAGQC9wMG
ALsB9wMGANYB6AIKAH8CKAMKAPYAKAMGALEDqgMGAFoBNgQGAEwFqgMGABkEaQQGAAkE4gMOACoB
YwMOAIsBYwMOABIBzQMGAD8BSQQKAFEDKAMSAP8EoQASAHQAoQAGAAEAqgMGAAIDqgMWAIAFEgUW
AF8FEgUGAMEAqgMGAH0AqgMGAI8F9wMAAAAAKwAAAAAAAQABAAEAEADCAwcAOQABAAEAAAAQAHAE
zARFAAEAAwAAARAACQXMBFkAAwAHAAMBAAA3BQAAPQAEAAoAEQC2A3MAEQDmAHcAEQBkAHsABgZT
AH8AVoAnBYIAVoDGAIIAUCAAAAAAhgDIAwYAAQDFIAAAAACGGCkEBgABAM0gAAAAAIMYKQQGAAEA
1SAAAAAAkwgVBIYAAQABIQAAAACTCM4AiwABAAghAAAAAJMI2gCQAAEAECEAAAAAlghTBZYAAgAX
IQAAAACGGCkEBgACAB8hAAAAAJEYLwSbAAIAAAABAOICCQApBAEAEQApBAYAGQApBAoAKQApBBAA
MQApBBAAOQApBBAAQQApBBAASQApBBAAUQApBBAAWQApBBAAYQApBBAAaQApBAYAgQApBAYAqQAp
BBUAuQApBAYAcQAvBSAAwQD7BCUAyQChAyoA0QDYAjAA4QBFBTQA6QB7BTsAwQBsBQEAcQApBAYA
iQApBAYA+QCPAEEA+QCLBUkAkQApBE8AsQApBAYACAAUAGkACAAYAG4AKQBzANYALgALAK4ALgAT
ALcALgAbANYALgAjAN8ALgArAAgBLgAzAAgBLgA7AA4BLgBDAN8ALgBLACsBLgBTAAgBLgBbAFkB
QwBjAG4ASQBzANYAYQB7AG4AYwBrAG4AGwADAAEABAADAAAAGQSfAAAA7gCkAAAAVwWpAAIABAAD
AAIABQAFAAEABgAFAAIABwAHAASAAAABAAAAbhjGEgAAAAAAAAcAAAAEAAAAAAAAAAAAAABXAFsA
AAAAAA0AAAAAAAAAAAAAAGAACQMAAAAABAAAAAAAAAAAAAAAVwCqAwAAAAANAAAAAAAAAAAAAABg
ADQAAAAAAAQAAAAAAAAAAAAAAFcAEgUAAAAAAAAAAAEAAAB6BAAABQACAAAAAAAASW50MzIAU1Rf
ODQxZDMyYjM3MTliNDFhMzljNTIwOTc4NDA0OTIwMDcAPE1vZHVsZT4ATWljcm9zb2Z0LlNxbFNl
cnZlci5NYW5hZ2VkRFRTAHZhbHVlX18AbXNjb3JsaWIAZGVmYXVsdEluc3RhbmNlAFZhcmlhYmxl
AFJ1bnRpbWVUeXBlSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAE1pY3Jvc29mdC5TcWxTZXJ2ZXIu
RHRzLlJ1bnRpbWUAVHlwZQBGYWlsdXJlAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAHJlc291cmNl
Q3VsdHVyZQBWU1RBUlRTY3JpcHRPYmplY3RNb2RlbEJhc2UAQXBwbGljYXRpb25TZXR0aW5nc0Jh
c2UARWRpdG9yQnJvd3NhYmxlU3RhdGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdn
ZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBEZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJs
ZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmli
dXRlAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1
dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0
cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0
ZQBTU0lTU2NyaXB0VGFza0VudHJ5UG9pbnRBdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmli
dXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0cmlidXRlAGdldF9WYWx1ZQB2YWx1ZQBTeXN0ZW0u
UnVudGltZS5WZXJzaW9uaW5nAFN0cmluZwBNaWNyb3NvZnQuU3FsU2VydmVyLlNjcmlwdFRhc2sA
TWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuVGFza3MuU2NyaXB0VGFzawBTY3JpcHRPYmplY3RNb2Rl
bABTeXN0ZW0uQ29tcG9uZW50TW9kZWwAU1RfODQxZDMyYjM3MTliNDFhMzljNTIwOTc4NDA0OTIw
MDcuZGxsAGdldF9JdGVtAFN5c3RlbQBFbnVtAHJlc291cmNlTWFuAFNjcmlwdE1haW4AU3lzdGVt
LkNvbmZpZ3VyYXRpb24AU3lzdGVtLkdsb2JhbGl6YXRpb24AU3lzdGVtLlJlZmxlY3Rpb24AQ3Vs
dHVyZUluZm8AZ2V0X1Jlc291cmNlTWFuYWdlcgAuY3RvcgAuY2N0b3IAU3lzdGVtLkRpYWdub3N0
aWNzAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2VydmljZXMAU3lzdGVtLlJlc291cmNlcwBTVF84
NDFkMzJiMzcxOWI0MWEzOWM1MjA5Nzg0MDQ5MjAwNy5Qcm9wZXJ0aWVzLlJlc291cmNlcy5yZXNv
dXJjZXMARGVidWdnaW5nTW9kZXMAU1RfODQxZDMyYjM3MTliNDFhMzljNTIwOTc4NDA0OTIwMDcu
UHJvcGVydGllcwBnZXRfVmFyaWFibGVzAFNldHRpbmdzAFN5c3RlbS5XaW5kb3dzLkZvcm1zAFN1
Y2Nlc3MAZ2V0X0R0cwBTY3JpcHRSZXN1bHRzAEZvcm1hdABPYmplY3QAZ2V0X0RlZmF1bHQARGlh
bG9nUmVzdWx0AHNldF9UYXNrUmVzdWx0AFNob3cATWVzc2FnZUJveABnZXRfQXNzZW1ibHkAACNV
AHMAZQByADoAOgBMAG8AbgBkAG8AbgBUAG8AdABhAGwAACNVAHMAZQByADoAOgBCAGUAcgBsAGkA
bgBUAG8AdABhAGwAADNMAG8AbgBkAG8AbgA6ACAAewAwAH0AIAAtACAAQgBlAHIAbABpAG4AOgAg
AHsAMQB9AAFxUwBUAF8AOAA0ADEAZAAzADIAYgAzADcAMQA5AGIANAAxAGEAMwA5AGMANQAyADAA
OQA3ADgANAAwADQAOQAyADAAMAA3AC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQBy
AGMAZQBzAAAAWXgk9M6ZgUSNmtLuqv5iaQAEIAEBCAMgAAEFIAEBEREEIAEBDgUgAQERUQQHAggI
BCAAEmEEIAASZQUgARJpHAMgABwGAAMODhwcBQABEXkOBwABEn0RgIEFIAASgIUHIAIBDhKAhQi3
elxWGTTgiQiJhF3NgIDMkQQAAAAABAEAAAADBhJJAwYSTQMGEhACBggDBhEUBAAAEkkEAAASTQUA
AQESTQQAABIQAwAAAQQIABJJBAgAEk0ECAASEAgBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2Vw
dGlvblRocm93cwEIAQACAAAAAAAoAQAjU1RfODQxZDMyYjM3MTliNDFhMzljNTIwOTc4NDA0OTIw
MDcAAAUBAAAAABwBABdIZXdsZXR0LVBhY2thcmQgQ29tcGFueQAALQEAKENvcHlyaWdodCBAIEhl
d2xldHQtUGFja2FyZCBDb21wYW55IDIwMTcAAEkBABouTkVURnJhbWV3b3JrLFZlcnNpb249djQu
NQEAVA4URnJhbWV3b3JrRGlzcGxheU5hbWUSLk5FVCBGcmFtZXdvcmsgNC41ALQAAADOyu++AQAA
AJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNpb249
NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5
I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFEULQA
AACkLgAAAAAAAAAAAAC+LgAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsC4AAAAAAAAAAAAAAABf
Q29yRGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUAIAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAABABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAA
AABIAAAAWEAAAGwEAAAAAAAAAAAAAGwENAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBP
AAAAAAC9BO/+AAABAAAAAQDGEm4YAAABAMYSbhg/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAA
RAAAAAEAVgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBv
AG4AAAAAAAAAsATMAwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAACoAwAAAQAwADAA
MAAwADAANABiADAAAAAaAAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAAUAAYAAEAQwBvAG0AcABh
AG4AeQBOAGEAbQBlAAAAAABIAGUAdwBsAGUAdAB0AC0AUABhAGMAawBhAHIAZAAgAEMAbwBtAHAA
YQBuAHkAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAUwBUAF8AOAA0
ADEAZAAzADIAYgAzADcAMQA5AGIANAAxAGEAMwA5AGMANQAyADAAOQA3ADgANAAwADQAOQAyADAA
MAA3AAAAPAAOAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADYAMgA1ADQALgA0
ADgAMAA2AAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAFQAXwA4ADQAMQBkADMA
MgBiADMANwAxADkAYgA0ADEAYQAzADkAYwA1ADIAMAA5ADcAOAA0ADAANAA5ADIAMAAwADcALgBk
AGwAbAAAAHYAKQABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBpAGcA
aAB0ACAAQAAgAEgAZQB3AGwAZQB0AHQALQBQAGEAYwBrAGEAcgBkACAAQwBvAG0AcABhAG4AeQAg
ADIAMAAxADcAAAAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBkAGUAbQBhAHIAawBzAAAAAAAAAAAA
eAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMAVABfADgANAAxAGQAMwAy
AGIAMwA3ADEAOQBiADQAMQBhADMAOQBjADUAMgAwADkANwA4ADQAMAA0ADkAMgAwADAANwAuAGQA
bABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAFQAXwA4ADQAMQBkADMAMgBi
ADMANwAxADkAYgA0ADEAYQAzADkAYwA1ADIAMAA5ADcAOAA0ADAANAA5ADIAMAAwADcAAABAAA4A
AQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADYAMgA1ADQALgA0ADgAMAA2
AAAARAAOAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4ANgAyADUA
NAAuADQAOAAwADYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAwAAADQPgAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Import From Excel"
      DTS:CreationName="STOCK:SEQUENCE"
      DTS:Description="Sequence Container"
      DTS:DTSID="{18815EDF-8DC7-4D2C-9780-74CE03CD0701}"
      DTS:ExecutableType="STOCK:SEQUENCE"
      DTS:LocaleID="-1"
      DTS:ObjectName="Import From Excel">
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Import From Excel\Import Berlin Customers"
          DTS:CreationName="Microsoft.Pipeline"
          DTS:Description="Data Flow Task"
          DTS:DTSID="{F2FF26A3-EBDB-40D1-B4A2-6E85FC804C71}"
          DTS:ExecutableType="Microsoft.Pipeline"
          DTS:LocaleID="-1"
          DTS:ObjectName="Import Berlin Customers"
          DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
          <DTS:Variables />
          <DTS:ObjectData>
            <pipeline
              version="1">
              <components>
                <component
                  refId="Package\Import From Excel\Import Berlin Customers\Import Customers"
                  componentClassID="Microsoft.ExcelSource"
                  contactInfo="Excel Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
                  description="Excel Source"
                  name="Import Customers"
                  usesDispositions="true"
                  version="1">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                      name="CommandTimeout">0</property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the database object used to open a rowset."
                      name="OpenRowset">Berlin_Customers</property>
                    <property
                      dataType="System.String"
                      description="Specifies the variable that contains the name of the database object used to open a rowset."
                      name="OpenRowsetVariable"></property>
                    <property
                      dataType="System.String"
                      description="The SQL command to be executed."
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                    <property
                      dataType="System.String"
                      description="The variable that contains the SQL command to be executed."
                      name="SqlCommandVariable"></property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the mode used to access the database."
                      name="AccessMode"
                      typeConverter="AccessMode">0</property>
                    <property
                      dataType="System.String"
                      description="The mapping from parameters in the SQL command to variables."
                      name="ParameterMapping"></property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Import From Excel\Import Berlin Customers\Import Customers.Connections[OleDbConnection]"
                      connectionManagerID="Package.ConnectionManagers[Excel Connection Manager]"
                      connectionManagerRefId="Package.ConnectionManagers[Excel Connection Manager]"
                      description="The OLE DB runtime connection used to access the database."
                      name="OleDbConnection" />
                  </connections>
                  <outputs>
                    <output
                      refId="Package\Import From Excel\Import Berlin Customers\Import Customers.Outputs[Excel Source Output]"
                      name="Excel Source Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Import From Excel\Import Berlin Customers\Import Customers.Outputs[Excel Source Output].Columns[City]"
                          dataType="wstr"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Import From Excel\Import Berlin Customers\Import Customers.Outputs[Excel Source Output].ExternalColumns[City]"
                          length="255"
                          lineageId="Package\Import From Excel\Import Berlin Customers\Import Customers.Outputs[Excel Source Output].Columns[City]"
                          name="City"
                          truncationRowDisposition="FailComponent" />
                      </outputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Import From Excel\Import Berlin Customers\Import Customers.Outputs[Excel Source Output].ExternalColumns[CustomerID]"
                          dataType="wstr"
                          length="255"
                          name="CustomerID" />
                        <externalMetadataColumn
                          refId="Package\Import From Excel\Import Berlin Customers\Import Customers.Outputs[Excel Source Output].ExternalColumns[CompanyName]"
                          dataType="wstr"
                          length="255"
                          name="CompanyName" />
                        <externalMetadataColumn
                          refId="Package\Import From Excel\Import Berlin Customers\Import Customers.Outputs[Excel Source Output].ExternalColumns[ContactName]"
                          dataType="wstr"
                          length="255"
                          name="ContactName" />
                        <externalMetadataColumn
                          refId="Package\Import From Excel\Import Berlin Customers\Import Customers.Outputs[Excel Source Output].ExternalColumns[ContactTitle]"
                          dataType="wstr"
                          length="255"
                          name="ContactTitle" />
                        <externalMetadataColumn
                          refId="Package\Import From Excel\Import Berlin Customers\Import Customers.Outputs[Excel Source Output].ExternalColumns[Address]"
                          dataType="wstr"
                          length="255"
                          name="Address" />
                        <externalMetadataColumn
                          refId="Package\Import From Excel\Import Berlin Customers\Import Customers.Outputs[Excel Source Output].ExternalColumns[City]"
                          dataType="wstr"
                          length="255"
                          name="City" />
                        <externalMetadataColumn
                          refId="Package\Import From Excel\Import Berlin Customers\Import Customers.Outputs[Excel Source Output].ExternalColumns[Region]"
                          dataType="wstr"
                          length="255"
                          name="Region" />
                        <externalMetadataColumn
                          refId="Package\Import From Excel\Import Berlin Customers\Import Customers.Outputs[Excel Source Output].ExternalColumns[PostalCode]"
                          dataType="wstr"
                          length="255"
                          name="PostalCode" />
                        <externalMetadataColumn
                          refId="Package\Import From Excel\Import Berlin Customers\Import Customers.Outputs[Excel Source Output].ExternalColumns[Country]"
                          dataType="wstr"
                          length="255"
                          name="Country" />
                        <externalMetadataColumn
                          refId="Package\Import From Excel\Import Berlin Customers\Import Customers.Outputs[Excel Source Output].ExternalColumns[Phone]"
                          dataType="wstr"
                          length="255"
                          name="Phone" />
                        <externalMetadataColumn
                          refId="Package\Import From Excel\Import Berlin Customers\Import Customers.Outputs[Excel Source Output].ExternalColumns[Fax]"
                          dataType="wstr"
                          length="255"
                          name="Fax" />
                      </externalMetadataColumns>
                    </output>
                    <output
                      refId="Package\Import From Excel\Import Berlin Customers\Import Customers.Outputs[Excel Source Error Output]"
                      isErrorOut="true"
                      name="Excel Source Error Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Import From Excel\Import Berlin Customers\Import Customers.Outputs[Excel Source Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Import From Excel\Import Berlin Customers\Import Customers.Outputs[Excel Source Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Import From Excel\Import Berlin Customers\Import Customers.Outputs[Excel Source Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Import From Excel\Import Berlin Customers\Import Customers.Outputs[Excel Source Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                        <outputColumn
                          refId="Package\Import From Excel\Import Berlin Customers\Import Customers.Outputs[Excel Source Error Output].Columns[City]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Import From Excel\Import Berlin Customers\Import Customers.Outputs[Excel Source Error Output].Columns[City]"
                          name="City" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Import From Excel\Import Berlin Customers\Row Count"
                  componentClassID="Microsoft.RowCount"
                  contactInfo="Row Count;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Counts rows as they pass through a data flow. For example, use the number of rows processed to determine whether or not to perform cleanup operations, or update text in an e-mail message to communicate processing status."
                  name="Row Count">
                  <properties>
                    <property
                      dataType="System.String"
                      description="Specifies the variable to hold the row count."
                      name="VariableName">User::BerlinTotal</property>
                  </properties>
                  <inputs>
                    <input
                      refId="Package\Import From Excel\Import Berlin Customers\Row Count.Inputs[Row Count Input 1]"
                      hasSideEffects="true"
                      name="Row Count Input 1">
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Import From Excel\Import Berlin Customers\Row Count.Outputs[Row Count Output 1]"
                      name="Row Count Output 1"
                      synchronousInputId="Package\Import From Excel\Import Berlin Customers\Row Count.Inputs[Row Count Input 1]">
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
              </components>
              <paths>
                <path
                  refId="Package\Import From Excel\Import Berlin Customers.Paths[Excel Source Output]"
                  endId="Package\Import From Excel\Import Berlin Customers\Row Count.Inputs[Row Count Input 1]"
                  name="Excel Source Output"
                  startId="Package\Import From Excel\Import Berlin Customers\Import Customers.Outputs[Excel Source Output]" />
              </paths>
            </pipeline>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Import From Excel\Import London Customers"
          DTS:CreationName="Microsoft.Pipeline"
          DTS:Description="Data Flow Task"
          DTS:DTSID="{E748B1F8-060F-4644-9D86-56E502D524A7}"
          DTS:ExecutableType="Microsoft.Pipeline"
          DTS:LocaleID="-1"
          DTS:ObjectName="Import London Customers"
          DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
          <DTS:Variables />
          <DTS:ObjectData>
            <pipeline
              version="1">
              <components>
                <component
                  refId="Package\Import From Excel\Import London Customers\Import Customers"
                  componentClassID="Microsoft.ExcelSource"
                  contactInfo="Excel Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
                  description="Excel Source"
                  name="Import Customers"
                  usesDispositions="true"
                  version="1">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                      name="CommandTimeout">0</property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the database object used to open a rowset."
                      name="OpenRowset">London_Customers</property>
                    <property
                      dataType="System.String"
                      description="Specifies the variable that contains the name of the database object used to open a rowset."
                      name="OpenRowsetVariable"></property>
                    <property
                      dataType="System.String"
                      description="The SQL command to be executed."
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                    <property
                      dataType="System.String"
                      description="The variable that contains the SQL command to be executed."
                      name="SqlCommandVariable"></property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the mode used to access the database."
                      name="AccessMode"
                      typeConverter="AccessMode">0</property>
                    <property
                      dataType="System.String"
                      description="The mapping from parameters in the SQL command to variables."
                      name="ParameterMapping"></property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Import From Excel\Import London Customers\Import Customers.Connections[OleDbConnection]"
                      connectionManagerID="Package.ConnectionManagers[Excel Connection Manager]"
                      connectionManagerRefId="Package.ConnectionManagers[Excel Connection Manager]"
                      description="The OLE DB runtime connection used to access the database."
                      name="OleDbConnection" />
                  </connections>
                  <outputs>
                    <output
                      refId="Package\Import From Excel\Import London Customers\Import Customers.Outputs[Excel Source Output]"
                      name="Excel Source Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Import From Excel\Import London Customers\Import Customers.Outputs[Excel Source Output].Columns[City]"
                          dataType="wstr"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Import From Excel\Import London Customers\Import Customers.Outputs[Excel Source Output].ExternalColumns[City]"
                          length="255"
                          lineageId="Package\Import From Excel\Import London Customers\Import Customers.Outputs[Excel Source Output].Columns[City]"
                          name="City"
                          truncationRowDisposition="FailComponent" />
                      </outputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Import From Excel\Import London Customers\Import Customers.Outputs[Excel Source Output].ExternalColumns[CustomerID]"
                          dataType="wstr"
                          length="255"
                          name="CustomerID" />
                        <externalMetadataColumn
                          refId="Package\Import From Excel\Import London Customers\Import Customers.Outputs[Excel Source Output].ExternalColumns[CompanyName]"
                          dataType="wstr"
                          length="255"
                          name="CompanyName" />
                        <externalMetadataColumn
                          refId="Package\Import From Excel\Import London Customers\Import Customers.Outputs[Excel Source Output].ExternalColumns[ContactName]"
                          dataType="wstr"
                          length="255"
                          name="ContactName" />
                        <externalMetadataColumn
                          refId="Package\Import From Excel\Import London Customers\Import Customers.Outputs[Excel Source Output].ExternalColumns[ContactTitle]"
                          dataType="wstr"
                          length="255"
                          name="ContactTitle" />
                        <externalMetadataColumn
                          refId="Package\Import From Excel\Import London Customers\Import Customers.Outputs[Excel Source Output].ExternalColumns[Address]"
                          dataType="wstr"
                          length="255"
                          name="Address" />
                        <externalMetadataColumn
                          refId="Package\Import From Excel\Import London Customers\Import Customers.Outputs[Excel Source Output].ExternalColumns[City]"
                          dataType="wstr"
                          length="255"
                          name="City" />
                        <externalMetadataColumn
                          refId="Package\Import From Excel\Import London Customers\Import Customers.Outputs[Excel Source Output].ExternalColumns[Region]"
                          dataType="wstr"
                          length="255"
                          name="Region" />
                        <externalMetadataColumn
                          refId="Package\Import From Excel\Import London Customers\Import Customers.Outputs[Excel Source Output].ExternalColumns[PostalCode]"
                          dataType="wstr"
                          length="255"
                          name="PostalCode" />
                        <externalMetadataColumn
                          refId="Package\Import From Excel\Import London Customers\Import Customers.Outputs[Excel Source Output].ExternalColumns[Country]"
                          dataType="wstr"
                          length="255"
                          name="Country" />
                        <externalMetadataColumn
                          refId="Package\Import From Excel\Import London Customers\Import Customers.Outputs[Excel Source Output].ExternalColumns[Phone]"
                          dataType="wstr"
                          length="255"
                          name="Phone" />
                        <externalMetadataColumn
                          refId="Package\Import From Excel\Import London Customers\Import Customers.Outputs[Excel Source Output].ExternalColumns[Fax]"
                          dataType="wstr"
                          length="255"
                          name="Fax" />
                      </externalMetadataColumns>
                    </output>
                    <output
                      refId="Package\Import From Excel\Import London Customers\Import Customers.Outputs[Excel Source Error Output]"
                      isErrorOut="true"
                      name="Excel Source Error Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Import From Excel\Import London Customers\Import Customers.Outputs[Excel Source Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Import From Excel\Import London Customers\Import Customers.Outputs[Excel Source Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Import From Excel\Import London Customers\Import Customers.Outputs[Excel Source Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Import From Excel\Import London Customers\Import Customers.Outputs[Excel Source Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                        <outputColumn
                          refId="Package\Import From Excel\Import London Customers\Import Customers.Outputs[Excel Source Error Output].Columns[City]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Import From Excel\Import London Customers\Import Customers.Outputs[Excel Source Error Output].Columns[City]"
                          name="City" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Import From Excel\Import London Customers\Row Count"
                  componentClassID="Microsoft.RowCount"
                  contactInfo="Row Count;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Counts rows as they pass through a data flow. For example, use the number of rows processed to determine whether or not to perform cleanup operations, or update text in an e-mail message to communicate processing status."
                  name="Row Count">
                  <properties>
                    <property
                      dataType="System.String"
                      description="Specifies the variable to hold the row count."
                      name="VariableName">User::LondonTotal</property>
                  </properties>
                  <inputs>
                    <input
                      refId="Package\Import From Excel\Import London Customers\Row Count.Inputs[Row Count Input 1]"
                      hasSideEffects="true"
                      name="Row Count Input 1">
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Import From Excel\Import London Customers\Row Count.Outputs[Row Count Output 1]"
                      name="Row Count Output 1"
                      synchronousInputId="Package\Import From Excel\Import London Customers\Row Count.Inputs[Row Count Input 1]">
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
              </components>
              <paths>
                <path
                  refId="Package\Import From Excel\Import London Customers.Paths[Excel Source Output]"
                  endId="Package\Import From Excel\Import London Customers\Row Count.Inputs[Row Count Input 1]"
                  name="Excel Source Output"
                  startId="Package\Import From Excel\Import London Customers\Import Customers.Outputs[Excel Source Output]" />
              </paths>
            </pipeline>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Import From Sql Server"
      DTS:CreationName="STOCK:SEQUENCE"
      DTS:Description="Sequence Container"
      DTS:DTSID="{A7291221-2FAD-49FB-895D-9F224E46653B}"
      DTS:ExecutableType="STOCK:SEQUENCE"
      DTS:LocaleID="-1"
      DTS:ObjectName="Import From Sql Server">
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Import From Sql Server\Import Berlin Customers"
          DTS:CreationName="Microsoft.Pipeline"
          DTS:Description="Data Flow Task"
          DTS:DTSID="{3F419D9A-9963-4F7A-A734-21FFC4959458}"
          DTS:ExecutableType="Microsoft.Pipeline"
          DTS:LocaleID="-1"
          DTS:ObjectName="Import Berlin Customers"
          DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
          <DTS:Variables />
          <DTS:ObjectData>
            <pipeline
              version="1">
              <components>
                <component
                  refId="Package\Import From Sql Server\Import Berlin Customers\Conditional Split"
                  componentClassID="Microsoft.ConditionalSplit"
                  contactInfo="Conditional Split;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Routes data rows to different outputs depending on the content of the data. Use conditions (SSIS expressions) to specify which rows are routed. For example, separate records that need to be cleaned from those that are ready to be loaded or route only a subset of records."
                  name="Conditional Split"
                  usesDispositions="true">
                  <inputs>
                    <input
                      refId="Package\Import From Sql Server\Import Berlin Customers\Conditional Split.Inputs[Conditional Split Input]"
                      description="Input to the Conditional Split Transformation"
                      name="Conditional Split Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Import From Sql Server\Import Berlin Customers\Conditional Split.Inputs[Conditional Split Input].Columns[City]"
                          cachedDataType="wstr"
                          cachedLength="15"
                          cachedName="City"
                          lineageId="Package\Import From Sql Server\Import Berlin Customers\OLE DB Source.Outputs[OLE DB Source Output].Columns[City]" />
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Import From Sql Server\Import Berlin Customers\Conditional Split.Outputs[Case 1]"
                      description="Output 1 of the Conditional Split Transformation"
                      errorOrTruncationOperation="Computation"
                      errorRowDisposition="FailComponent"
                      exclusionGroup="1"
                      name="Case 1"
                      synchronousInputId="Package\Import From Sql Server\Import Berlin Customers\Conditional Split.Inputs[Conditional Split Input]"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Specifies the expression. This expression version uses lineage identifiers instead of column names."
                          name="Expression">#{Package\Import From Sql Server\Import Berlin Customers\OLE DB Source.Outputs[OLE DB Source Output].Columns[City]} == "Berlin"</property>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Specifies the friendly version of the expression. This expression version uses column names."
                          expressionType="Notify"
                          name="FriendlyExpression">City == "Berlin"</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the position of the condition in the list of conditions that the transformation evaluates. The evaluation order is from the lowest to the highest value."
                          name="EvaluationOrder">0</property>
                      </properties>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Import From Sql Server\Import Berlin Customers\Conditional Split.Outputs[Conditional Split Default Output]"
                      description="Default Output of the Conditional Split Transformation"
                      exclusionGroup="1"
                      name="Conditional Split Default Output"
                      synchronousInputId="Package\Import From Sql Server\Import Berlin Customers\Conditional Split.Inputs[Conditional Split Input]">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          name="IsDefaultOut">true</property>
                      </properties>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Import From Sql Server\Import Berlin Customers\Conditional Split.Outputs[Conditional Split Error Output]"
                      description="Error Output of the Conditional Split Transformation"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Conditional Split Error Output"
                      synchronousInputId="Package\Import From Sql Server\Import Berlin Customers\Conditional Split.Inputs[Conditional Split Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Import From Sql Server\Import Berlin Customers\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Import From Sql Server\Import Berlin Customers\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Import From Sql Server\Import Berlin Customers\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Import From Sql Server\Import Berlin Customers\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Import From Sql Server\Import Berlin Customers\OLE DB Source"
                  componentClassID="Microsoft.OLEDBSource"
                  contactInfo="OLE DB Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;7"
                  description="OLE DB Source"
                  name="OLE DB Source"
                  usesDispositions="true"
                  version="7">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                      name="CommandTimeout">0</property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the database object used to open a rowset."
                      name="OpenRowset">[dbo].[Customers]</property>
                    <property
                      dataType="System.String"
                      description="Specifies the variable that contains the name of the database object used to open a rowset."
                      name="OpenRowsetVariable"></property>
                    <property
                      dataType="System.String"
                      description="The SQL command to be executed."
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                    <property
                      dataType="System.String"
                      description="The variable that contains the SQL command to be executed."
                      name="SqlCommandVariable"></property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1252</property>
                    <property
                      dataType="System.Boolean"
                      description="Forces the use of the DefaultCodePage property value when describing character data."
                      name="AlwaysUseDefaultCodePage">false</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the mode used to access the database."
                      name="AccessMode"
                      typeConverter="AccessMode">0</property>
                    <property
                      dataType="System.String"
                      description="The mappings between the parameters in the SQL command and variables."
                      name="ParameterMapping"></property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Import From Sql Server\Import Berlin Customers\OLE DB Source.Connections[OleDbConnection]"
                      connectionManagerID="{D41A5A09-C3E2-4B83-BD6C-5DD6C5A0A313}:external"
                      connectionManagerRefId="Project.ConnectionManagers[__SQLEXPRESS.Northwind]"
                      description="The OLE DB runtime connection used to access the database."
                      name="OleDbConnection" />
                  </connections>
                  <outputs>
                    <output
                      refId="Package\Import From Sql Server\Import Berlin Customers\OLE DB Source.Outputs[OLE DB Source Output]"
                      name="OLE DB Source Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Import From Sql Server\Import Berlin Customers\OLE DB Source.Outputs[OLE DB Source Output].Columns[City]"
                          dataType="wstr"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Import From Sql Server\Import Berlin Customers\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[City]"
                          length="15"
                          lineageId="Package\Import From Sql Server\Import Berlin Customers\OLE DB Source.Outputs[OLE DB Source Output].Columns[City]"
                          name="City"
                          truncationRowDisposition="FailComponent" />
                      </outputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Import From Sql Server\Import Berlin Customers\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[CustomerID]"
                          dataType="wstr"
                          length="5"
                          name="CustomerID" />
                        <externalMetadataColumn
                          refId="Package\Import From Sql Server\Import Berlin Customers\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[CompanyName]"
                          dataType="wstr"
                          length="40"
                          name="CompanyName" />
                        <externalMetadataColumn
                          refId="Package\Import From Sql Server\Import Berlin Customers\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[ContactName]"
                          dataType="wstr"
                          length="30"
                          name="ContactName" />
                        <externalMetadataColumn
                          refId="Package\Import From Sql Server\Import Berlin Customers\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[ContactTitle]"
                          dataType="wstr"
                          length="30"
                          name="ContactTitle" />
                        <externalMetadataColumn
                          refId="Package\Import From Sql Server\Import Berlin Customers\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[Address]"
                          dataType="wstr"
                          length="60"
                          name="Address" />
                        <externalMetadataColumn
                          refId="Package\Import From Sql Server\Import Berlin Customers\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[City]"
                          dataType="wstr"
                          length="15"
                          name="City" />
                        <externalMetadataColumn
                          refId="Package\Import From Sql Server\Import Berlin Customers\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[Region]"
                          dataType="wstr"
                          length="15"
                          name="Region" />
                        <externalMetadataColumn
                          refId="Package\Import From Sql Server\Import Berlin Customers\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[PostalCode]"
                          dataType="wstr"
                          length="10"
                          name="PostalCode" />
                        <externalMetadataColumn
                          refId="Package\Import From Sql Server\Import Berlin Customers\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[Country]"
                          dataType="wstr"
                          length="15"
                          name="Country" />
                        <externalMetadataColumn
                          refId="Package\Import From Sql Server\Import Berlin Customers\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[Phone]"
                          dataType="wstr"
                          length="24"
                          name="Phone" />
                        <externalMetadataColumn
                          refId="Package\Import From Sql Server\Import Berlin Customers\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[Fax]"
                          dataType="wstr"
                          length="24"
                          name="Fax" />
                      </externalMetadataColumns>
                    </output>
                    <output
                      refId="Package\Import From Sql Server\Import Berlin Customers\OLE DB Source.Outputs[OLE DB Source Error Output]"
                      isErrorOut="true"
                      name="OLE DB Source Error Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Import From Sql Server\Import Berlin Customers\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Import From Sql Server\Import Berlin Customers\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Import From Sql Server\Import Berlin Customers\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Import From Sql Server\Import Berlin Customers\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                        <outputColumn
                          refId="Package\Import From Sql Server\Import Berlin Customers\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[City]"
                          dataType="wstr"
                          length="15"
                          lineageId="Package\Import From Sql Server\Import Berlin Customers\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[City]"
                          name="City" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Import From Sql Server\Import Berlin Customers\Row Count"
                  componentClassID="Microsoft.RowCount"
                  contactInfo="Row Count;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Counts rows as they pass through a data flow. For example, use the number of rows processed to determine whether or not to perform cleanup operations, or update text in an e-mail message to communicate processing status."
                  name="Row Count">
                  <properties>
                    <property
                      dataType="System.String"
                      description="Specifies the variable to hold the row count."
                      name="VariableName">User::BerlinTotal</property>
                  </properties>
                  <inputs>
                    <input
                      refId="Package\Import From Sql Server\Import Berlin Customers\Row Count.Inputs[Row Count Input 1]"
                      hasSideEffects="true"
                      name="Row Count Input 1">
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Import From Sql Server\Import Berlin Customers\Row Count.Outputs[Row Count Output 1]"
                      name="Row Count Output 1"
                      synchronousInputId="Package\Import From Sql Server\Import Berlin Customers\Row Count.Inputs[Row Count Input 1]">
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
              </components>
              <paths>
                <path
                  refId="Package\Import From Sql Server\Import Berlin Customers.Paths[Case 1]"
                  endId="Package\Import From Sql Server\Import Berlin Customers\Row Count.Inputs[Row Count Input 1]"
                  name="Case 1"
                  startId="Package\Import From Sql Server\Import Berlin Customers\Conditional Split.Outputs[Case 1]" />
                <path
                  refId="Package\Import From Sql Server\Import Berlin Customers.Paths[OLE DB Source Output]"
                  endId="Package\Import From Sql Server\Import Berlin Customers\Conditional Split.Inputs[Conditional Split Input]"
                  name="OLE DB Source Output"
                  startId="Package\Import From Sql Server\Import Berlin Customers\OLE DB Source.Outputs[OLE DB Source Output]" />
              </paths>
            </pipeline>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Import From Sql Server\Import London Customers"
          DTS:CreationName="Microsoft.Pipeline"
          DTS:Description="Data Flow Task"
          DTS:DTSID="{9DE4AFE6-A8E6-4E5E-9C81-2CA038EF5D0D}"
          DTS:ExecutableType="Microsoft.Pipeline"
          DTS:LocaleID="-1"
          DTS:ObjectName="Import London Customers"
          DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
          <DTS:Variables />
          <DTS:ObjectData>
            <pipeline
              version="1">
              <components>
                <component
                  refId="Package\Import From Sql Server\Import London Customers\Conditional Split"
                  componentClassID="Microsoft.ConditionalSplit"
                  contactInfo="Conditional Split;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Routes data rows to different outputs depending on the content of the data. Use conditions (SSIS expressions) to specify which rows are routed. For example, separate records that need to be cleaned from those that are ready to be loaded or route only a subset of records."
                  name="Conditional Split"
                  usesDispositions="true">
                  <inputs>
                    <input
                      refId="Package\Import From Sql Server\Import London Customers\Conditional Split.Inputs[Conditional Split Input]"
                      description="Input to the Conditional Split Transformation"
                      name="Conditional Split Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Import From Sql Server\Import London Customers\Conditional Split.Inputs[Conditional Split Input].Columns[City]"
                          cachedDataType="wstr"
                          cachedLength="15"
                          cachedName="City"
                          lineageId="Package\Import From Sql Server\Import London Customers\OLE DB Source.Outputs[OLE DB Source Output].Columns[City]" />
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Import From Sql Server\Import London Customers\Conditional Split.Outputs[Case 1]"
                      description="Output 1 of the Conditional Split Transformation"
                      errorOrTruncationOperation="Computation"
                      errorRowDisposition="FailComponent"
                      exclusionGroup="1"
                      name="Case 1"
                      synchronousInputId="Package\Import From Sql Server\Import London Customers\Conditional Split.Inputs[Conditional Split Input]"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Specifies the expression. This expression version uses lineage identifiers instead of column names."
                          name="Expression">#{Package\Import From Sql Server\Import London Customers\OLE DB Source.Outputs[OLE DB Source Output].Columns[City]} == "London"</property>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Specifies the friendly version of the expression. This expression version uses column names."
                          expressionType="Notify"
                          name="FriendlyExpression">City == "London"</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the position of the condition in the list of conditions that the transformation evaluates. The evaluation order is from the lowest to the highest value."
                          name="EvaluationOrder">0</property>
                      </properties>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Import From Sql Server\Import London Customers\Conditional Split.Outputs[Conditional Split Default Output]"
                      description="Default Output of the Conditional Split Transformation"
                      exclusionGroup="1"
                      name="Conditional Split Default Output"
                      synchronousInputId="Package\Import From Sql Server\Import London Customers\Conditional Split.Inputs[Conditional Split Input]">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          name="IsDefaultOut">true</property>
                      </properties>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Import From Sql Server\Import London Customers\Conditional Split.Outputs[Conditional Split Error Output]"
                      description="Error Output of the Conditional Split Transformation"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Conditional Split Error Output"
                      synchronousInputId="Package\Import From Sql Server\Import London Customers\Conditional Split.Inputs[Conditional Split Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Import From Sql Server\Import London Customers\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Import From Sql Server\Import London Customers\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Import From Sql Server\Import London Customers\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Import From Sql Server\Import London Customers\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Import From Sql Server\Import London Customers\OLE DB Source"
                  componentClassID="Microsoft.OLEDBSource"
                  contactInfo="OLE DB Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;7"
                  description="OLE DB Source"
                  name="OLE DB Source"
                  usesDispositions="true"
                  version="7">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                      name="CommandTimeout">0</property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the database object used to open a rowset."
                      name="OpenRowset">[dbo].[Customers]</property>
                    <property
                      dataType="System.String"
                      description="Specifies the variable that contains the name of the database object used to open a rowset."
                      name="OpenRowsetVariable"></property>
                    <property
                      dataType="System.String"
                      description="The SQL command to be executed."
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                    <property
                      dataType="System.String"
                      description="The variable that contains the SQL command to be executed."
                      name="SqlCommandVariable"></property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1252</property>
                    <property
                      dataType="System.Boolean"
                      description="Forces the use of the DefaultCodePage property value when describing character data."
                      name="AlwaysUseDefaultCodePage">false</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the mode used to access the database."
                      name="AccessMode"
                      typeConverter="AccessMode">0</property>
                    <property
                      dataType="System.String"
                      description="The mappings between the parameters in the SQL command and variables."
                      name="ParameterMapping"></property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Import From Sql Server\Import London Customers\OLE DB Source.Connections[OleDbConnection]"
                      connectionManagerID="{D41A5A09-C3E2-4B83-BD6C-5DD6C5A0A313}:external"
                      connectionManagerRefId="Project.ConnectionManagers[__SQLEXPRESS.Northwind]"
                      description="The OLE DB runtime connection used to access the database."
                      name="OleDbConnection" />
                  </connections>
                  <outputs>
                    <output
                      refId="Package\Import From Sql Server\Import London Customers\OLE DB Source.Outputs[OLE DB Source Output]"
                      name="OLE DB Source Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Import From Sql Server\Import London Customers\OLE DB Source.Outputs[OLE DB Source Output].Columns[City]"
                          dataType="wstr"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Import From Sql Server\Import London Customers\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[City]"
                          length="15"
                          lineageId="Package\Import From Sql Server\Import London Customers\OLE DB Source.Outputs[OLE DB Source Output].Columns[City]"
                          name="City"
                          truncationRowDisposition="FailComponent" />
                      </outputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Import From Sql Server\Import London Customers\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[CustomerID]"
                          dataType="wstr"
                          length="5"
                          name="CustomerID" />
                        <externalMetadataColumn
                          refId="Package\Import From Sql Server\Import London Customers\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[CompanyName]"
                          dataType="wstr"
                          length="40"
                          name="CompanyName" />
                        <externalMetadataColumn
                          refId="Package\Import From Sql Server\Import London Customers\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[ContactName]"
                          dataType="wstr"
                          length="30"
                          name="ContactName" />
                        <externalMetadataColumn
                          refId="Package\Import From Sql Server\Import London Customers\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[ContactTitle]"
                          dataType="wstr"
                          length="30"
                          name="ContactTitle" />
                        <externalMetadataColumn
                          refId="Package\Import From Sql Server\Import London Customers\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[Address]"
                          dataType="wstr"
                          length="60"
                          name="Address" />
                        <externalMetadataColumn
                          refId="Package\Import From Sql Server\Import London Customers\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[City]"
                          dataType="wstr"
                          length="15"
                          name="City" />
                        <externalMetadataColumn
                          refId="Package\Import From Sql Server\Import London Customers\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[Region]"
                          dataType="wstr"
                          length="15"
                          name="Region" />
                        <externalMetadataColumn
                          refId="Package\Import From Sql Server\Import London Customers\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[PostalCode]"
                          dataType="wstr"
                          length="10"
                          name="PostalCode" />
                        <externalMetadataColumn
                          refId="Package\Import From Sql Server\Import London Customers\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[Country]"
                          dataType="wstr"
                          length="15"
                          name="Country" />
                        <externalMetadataColumn
                          refId="Package\Import From Sql Server\Import London Customers\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[Phone]"
                          dataType="wstr"
                          length="24"
                          name="Phone" />
                        <externalMetadataColumn
                          refId="Package\Import From Sql Server\Import London Customers\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[Fax]"
                          dataType="wstr"
                          length="24"
                          name="Fax" />
                      </externalMetadataColumns>
                    </output>
                    <output
                      refId="Package\Import From Sql Server\Import London Customers\OLE DB Source.Outputs[OLE DB Source Error Output]"
                      isErrorOut="true"
                      name="OLE DB Source Error Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Import From Sql Server\Import London Customers\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Import From Sql Server\Import London Customers\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Import From Sql Server\Import London Customers\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Import From Sql Server\Import London Customers\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                        <outputColumn
                          refId="Package\Import From Sql Server\Import London Customers\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[City]"
                          dataType="wstr"
                          length="15"
                          lineageId="Package\Import From Sql Server\Import London Customers\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[City]"
                          name="City" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Import From Sql Server\Import London Customers\Row Count"
                  componentClassID="Microsoft.RowCount"
                  contactInfo="Row Count;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Counts rows as they pass through a data flow. For example, use the number of rows processed to determine whether or not to perform cleanup operations, or update text in an e-mail message to communicate processing status."
                  name="Row Count">
                  <properties>
                    <property
                      dataType="System.String"
                      description="Specifies the variable to hold the row count."
                      name="VariableName">User::LondonTotal</property>
                  </properties>
                  <inputs>
                    <input
                      refId="Package\Import From Sql Server\Import London Customers\Row Count.Inputs[Row Count Input 1]"
                      hasSideEffects="true"
                      name="Row Count Input 1">
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Import From Sql Server\Import London Customers\Row Count.Outputs[Row Count Output 1]"
                      name="Row Count Output 1"
                      synchronousInputId="Package\Import From Sql Server\Import London Customers\Row Count.Inputs[Row Count Input 1]">
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
              </components>
              <paths>
                <path
                  refId="Package\Import From Sql Server\Import London Customers.Paths[Case 1]"
                  endId="Package\Import From Sql Server\Import London Customers\Row Count.Inputs[Row Count Input 1]"
                  name="Case 1"
                  startId="Package\Import From Sql Server\Import London Customers\Conditional Split.Outputs[Case 1]" />
                <path
                  refId="Package\Import From Sql Server\Import London Customers.Paths[OLE DB Source Output]"
                  endId="Package\Import From Sql Server\Import London Customers\Conditional Split.Inputs[Conditional Split Input]"
                  name="OLE DB Source Output"
                  startId="Package\Import From Sql Server\Import London Customers\OLE DB Source.Outputs[OLE DB Source Output]" />
              </paths>
            </pipeline>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{4BDDBB91-24DE-4B12-B8B7-C2CA26EB1CF7}"
      DTS:From="Package\Choose Source"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\Import From Excel" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 1]"
      DTS:CreationName=""
      DTS:DTSID="{2BB2B60F-1DDB-4D02-A8F8-A0EE85CD414A}"
      DTS:From="Package\Choose Source"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 1"
      DTS:To="Package\Import From Sql Server"
      DTS:Value="1" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 2]"
      DTS:CreationName=""
      DTS:DTSID="{7E101C6F-0E84-456F-9764-44EA4F5063FF}"
      DTS:From="Package\Import From Excel"
      DTS:ObjectName="Constraint 2"
      DTS:To="Package\Display Count"
      DTS:Value="2" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 3]"
      DTS:CreationName=""
      DTS:DTSID="{1924088B-6272-4865-AEE0-93EAE20447C1}"
      DTS:From="Package\Import From Sql Server"
      DTS:ObjectName="Constraint 3"
      DTS:To="Package\Display Count"
      DTS:Value="2" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="16" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="151,42"
          Id="Package\Choose Source"
          TopLeft="485,38" />
        <NodeLayout
          Size="204,42"
          Id="Package\Import From Excel\Import London Customers"
          TopLeft="42,22" />
        <NodeLayout
          Size="199,42"
          Id="Package\Import From Excel\Import Berlin Customers"
          TopLeft="43,93" />
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="274,190"
          Size="274,233"
          Id="Package\Import From Excel"
          TopLeft="164,181" />
        <NodeLayout
          Size="204,42"
          Id="Package\Import From Sql Server\Import London Customers"
          TopLeft="38,24" />
        <NodeLayout
          Size="201,42"
          Id="Package\Import From Sql Server\Import Berlin Customers"
          TopLeft="40,91" />
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="267,188"
          Size="267,231"
          Id="Package\Import From Sql Server"
          TopLeft="696,182" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="536.666666666667,80">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-235.666666666667,101"
              Start="0,0"
              End="-235.666666666667,93.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,37.0353866317169" />
                  <mssgle:CubicBezierSegment
                    Point1="0,37.0353866317169"
                    Point2="0,41.0353866317169"
                    Point3="-4,41.0353866317169" />
                  <mssgle:LineSegment
                    End="-231.666666666667,41.0353866317169" />
                  <mssgle:CubicBezierSegment
                    Point1="-231.666666666667,41.0353866317169"
                    Point2="-235.666666666667,41.0353866317169"
                    Point3="-235.666666666667,45.0353866317169" />
                  <mssgle:LineSegment
                    End="-235.666666666667,93.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 1]"
          TopLeft="584.333333333333,80">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="245.166666666667,102"
              Start="0,0"
              End="245.166666666667,94.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,37.4416775884666" />
                  <mssgle:CubicBezierSegment
                    Point1="0,37.4416775884666"
                    Point2="0,41.4416775884666"
                    Point3="4,41.4416775884666" />
                  <mssgle:LineSegment
                    End="241.166666666667,41.4416775884666" />
                  <mssgle:CubicBezierSegment
                    Point1="241.166666666667,41.4416775884666"
                    Point2="245.166666666667,41.4416775884666"
                    Point3="245.166666666667,45.4416775884666" />
                  <mssgle:LineSegment
                    End="245.166666666667,94.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="107.341985677083,46.4416775884666,30.4826953125,9.7490234375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="146,42"
          Id="Package\Display Count"
          TopLeft="496,504" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 2]"
          TopLeft="301,414">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="245,90"
              Start="0,0"
              End="245,82.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,49.4146341463415" />
                  <mssgle:CubicBezierSegment
                    Point1="0,49.4146341463415"
                    Point2="0,53.4146341463415"
                    Point3="4,53.4146341463415" />
                  <mssgle:LineSegment
                    End="241,53.4146341463415" />
                  <mssgle:CubicBezierSegment
                    Point1="241,53.4146341463415"
                    Point2="245,53.4146341463415"
                    Point3="245,57.4146341463415" />
                  <mssgle:LineSegment
                    End="245,82.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="97.195546875,58.4146341463415,50.60890625,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 3]"
          TopLeft="829.5,413">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-237.5,91"
              Start="0,0"
              End="-237.5,83.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,50.0081300813008" />
                  <mssgle:CubicBezierSegment
                    Point1="0,50.0081300813008"
                    Point2="0,54.0081300813008"
                    Point3="-4,54.0081300813008" />
                  <mssgle:LineSegment
                    End="-233.5,54.0081300813008" />
                  <mssgle:CubicBezierSegment
                    Point1="-233.5,54.0081300813008"
                    Point2="-237.5,54.0081300813008"
                    Point3="-237.5,58.0081300813008" />
                  <mssgle:LineSegment
                    End="-237.5,83.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-144.054453125,59.0081300813008,50.60890625,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <TaskHost
    design-time-name="Package\Import From Excel\Import London Customers">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="166,42"
          Id="Package\Import From Excel\Import London Customers\Import Customers"
          TopLeft="392,132" />
        <NodeLayout
          Size="132,42"
          Id="Package\Import From Excel\Import London Customers\Row Count"
          TopLeft="409,214" />
        <EdgeLayout
          Id="Package\Import From Excel\Import London Customers.Paths[Excel Source Output]"
          TopLeft="475,174">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,40"
              Start="0,0"
              End="0,32.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,32.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <TaskHost
    design-time-name="Package\Import From Excel\Import Berlin Customers">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="166,42"
          Id="Package\Import From Excel\Import Berlin Customers\Import Customers"
          TopLeft="384,139" />
        <NodeLayout
          Size="132,42"
          Id="Package\Import From Excel\Import Berlin Customers\Row Count"
          TopLeft="401,226" />
        <EdgeLayout
          Id="Package\Import From Excel\Import Berlin Customers.Paths[Excel Source Output]"
          TopLeft="467,181">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,45"
              Start="0,0"
              End="0,37.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,37.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\Import From Excel\Import London Customers\Import Customers">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Import From Excel\Import Berlin Customers\Import Customers">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <TaskHost
    design-time-name="Package\Import From Sql Server\Import London Customers">
    <LayoutInfo>
      <GraphLayout
        Capacity="8" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="152,42"
          Id="Package\Import From Sql Server\Import London Customers\OLE DB Source"
          TopLeft="464,123" />
        <NodeLayout
          Size="157,42"
          Id="Package\Import From Sql Server\Import London Customers\Conditional Split"
          TopLeft="463,212" />
        <EdgeLayout
          Id="Package\Import From Sql Server\Import London Customers.Paths[OLE DB Source Output]"
          TopLeft="540.75,165">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,47"
              Start="0,0"
              End="0,39.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,39.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="132,42"
          Id="Package\Import From Sql Server\Import London Customers\Row Count"
          TopLeft="475,308" />
        <EdgeLayout
          Id="Package\Import From Sql Server\Import London Customers.Paths[Case 1]"
          TopLeft="541.25,254">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,54"
              Start="0,0"
              End="0,46.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,46.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-15.2180859375,18.47314453125,30.436171875,9.5537109375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <TaskHost
    design-time-name="Package\Import From Sql Server\Import Berlin Customers">
    <LayoutInfo>
      <GraphLayout
        Capacity="8" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="152,42"
          Id="Package\Import From Sql Server\Import Berlin Customers\OLE DB Source"
          TopLeft="420,102" />
        <NodeLayout
          Size="157,42"
          Id="Package\Import From Sql Server\Import Berlin Customers\Conditional Split"
          TopLeft="418,184" />
        <EdgeLayout
          Id="Package\Import From Sql Server\Import Berlin Customers.Paths[OLE DB Source Output]"
          TopLeft="496.25,144">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,40"
              Start="0,0"
              End="0,32.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,32.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="132,42"
          Id="Package\Import From Sql Server\Import Berlin Customers\Row Count"
          TopLeft="433,276" />
        <EdgeLayout
          Id="Package\Import From Sql Server\Import Berlin Customers.Paths[Case 1]"
          TopLeft="497.75,226">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,50"
              Start="0,0"
              End="0,42.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,42.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-15.2180859375,16.47314453125,30.436171875,9.5537109375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\Import From Sql Server\Import London Customers\OLE DB Source">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Import From Sql Server\Import Berlin Customers\OLE DB Source">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>